/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "Documentation for pp_lib";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html", "pp_buffered_vector__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "", " ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::init", "pp_buffered_vector::init", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::init", "    Creates a pp_buffered_vector object, with the contents of the given array, or empty     if it is not provided.     The buffered vector can contain elements of any type. The type is determined by the type of     the first element put into it (if not at initialization, at the first append operation).   ", "buffersize      Size of the step to use when incrementing the number of elements contained by the object.   initvec      An array whose elements are to be placed in the object on creation.   ", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::append", "pp_buffered_vector::append", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::append", "    Adds the given data (scalar or array) to the end of the buffered vector, expanding     its allocated size if necessary.   ", "data      The scalar or array to be put at the end of the buffered vector.   ", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getdata", "pp_buffered_vector::getdata", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getdata", "    Retrieves one or more data elements currently stored in the buffered vector.   ", "all      If set, all the elements stored in the buffered vector are returned.  count      Returns the number of elements retrieved.   nget      The number of elements to retrieve. If positive, the nget first elements are returned. If       negative, the last -nget elements are returned. If abs(nget) is larger than the number of       elements in the buffered vector, all the elements are returned. The value returned by count       must be checked to find out how many elements were actually returned.   ", "          -1", "    See the example in pp_bufferedvector__define.        If the buffered vector is empty, returns 0, with a count of 0. Otherwise, returns an array with     the selected elements from the buffered vector, and the number of elements in count.   ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getcount", "pp_buffered_vector::getcount", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getcount", "    Returns the number of elements currently stored in the buffered vector.   ", "", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getsize", "pp_buffered_vector::getsize", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getsize", "    Returns the currently allocated length for the buffered vector.   ", "", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getbuffersize", "pp_buffered_vector::getbuffersize", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getbuffersize", "    Returns the step by which the buffered vector is incremented when necessary.   ", "", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector__define", "pp_buffered_vector__define", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "pp_buffered_vector__define", "   Object to keep an adjustable length vector, using a buffer to decrease the frequency of resizing     It is a simple (without DLM) and relatively efficient implementation of a container similar to a list,    intended for light use. For heavy use, it would take a DLM to implement a proper list.   ", "", "          -1", "   Make a new empty buffered vector: <span class= code-output > a=obj_new('pp_buffered_vector')</span> <span class= code-output > print,a-&gt;getcount()</span> <span class= code-output > ;0</span> <span class= code-output > a-&gt;append,indgen(10)</span> <span class= code-output > print,a-&gt;getcount()</span> <span class= code-output > ;10</span> <span class= code-output > print,a-&gt;getdata(5)</span> <span class= code-output > ;0       1       2       3       4</span> <span class= code-output > rint,a-&gt;getdata(-5)</span> <span class= code-output > ;5       6       7       8       9</span> <span class= code-output > print,a-&gt;getdata(/all)</span> <span class= code-output > ;0       1       2       3       4       5       6       7       8       9</span> <span class= code-output > print,a-&gt;getsize()</span> <span class= code-output > ;100</span> <span class= code-output > print,a-&gt;getbuffersize()</span> <span class= code-output > ;100</span> <span class= code-output > obj_destroy,a</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_cube_extract.html", "pp_cube_extract.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_cube_extract.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_cube_extract.html#pp_cube_extract", "pp_cube_extract", 'routine in <a href="./pp_cube_extract.html">pp_cube_extract.pro</a>', "pp_cube_extract.pro", "Paulo Penteado (pp.penteado@gmail.com), May/2010 (refit to cube_extract from May/2008)  ", "pp_cube_extract", "  Refit of cube_extract.pro, to read the cubes using pp_readcube objects instead of ISIS.    Works similar to exttract3.f:    Reads the given cube and makes outfile with geometrical information   and a 2 column text file for each spectrum in the selection.    If no selection specified, the whole cube is used.    Selections are made with corners or list, described below.    Pixels out of the disk (as determined by 'LATITUDE') are not included in the output, unless nosel is set.    All pixel numbers given are vims numbers: [1,1] is the top left pixel.   ", "corners      A 4 element vector [xi,yi,xf,yf] specifying the region to select.  list      A 2xn array with x,y pixel numbers to select.  nan      Specifies what to use for pixels with special value. Defaults to !values.f_nan if oldfmt is not set,       'NUL' otherwise.  oldfmt      If set, forces outfile to be formatted as                 Filename      x      y      LATITUDE     LONGITUDE   PHASE_ANGLENCIDENCE_ANGLEEMISSION_ANGLE     DELTA_PHI        And forces nan='NUL', for backwards compatibility with extract3.f.  nosep      If set, does not make the individual ASCII files for each spectrum.   nosel      If set, returns all pixels in the selected region, not just those that fall on the surface.       If set, but the cube does not contain a 'LATITUDE' backplane, this is reset to 0.   cubefile      Passed to pp_readcube. The name of the file that contains the cube.  outfile      The name of the file where the geometrical information will be written to.   ", "          -1", "pp_readcube__define, pp_getcubeheadervalue, pp_extractfields, pp_buffered_vector   ");
  
  

libdata[libdataItem++] = new Array("./pp_cubecollection__define.html", "pp_cubecollection__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_cubecollection__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009  ", "", " ", "", "          -1", "pp_editablecube__define, pp_getcubeheadervalue, pp_extractfields, pp_setcubeheadervalue, pp_readcube__define   ");
  
  
  libdata[libdataItem++] = new Array("./pp_cubecollection__define.html#pp_cubecollection::init", "pp_cubecollection::init", 'routine in <a href="./pp_cubecollection__define.html">pp_cubecollection__define.pro</a>', "pp_cubecollection__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009  ", "pp_cubecollection::init", "    Initializes a pp_cubecollection object, either from a previously built file,     or builds the file from cube files.   ", "build      If set, the cubes named in cubefiles are read from disk and the container file is created.       Otherwise, it is assumed the container file was previously created, and the object gets       its data from that file.  cubefiles      If build is set, a string array with the names of the cube files to read. If absent and build is       set, all cubes found in the current directory (ending with '_eg.cub', '_ir_eg.cub', or '_vis_eg.cub',       depending on the vis and ir keywords) are used, and their names are returned in this keyword.  vis      If set, cubes matching '*_vis_eg.cub' are used when building the container file, instead of '*_eg.cub'.  ir      If set, cubes matching '*_ir_eg.cub' are used when building the container file, instead of '*_eg.cub'.   compressclass_ref_extrasavefile      The name of the file that either will contain the object's data, or the data will be       read from, depending on the build keyword.   ", "          -1", "    See the example on pp_editablecube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_cubecollection__define.html#pp_cubecollection::cleanup", "pp_cubecollection::cleanup", 'routine in <a href="./pp_cubecollection__define.html">pp_cubecollection__define.pro</a>', "pp_cubecollection__define.pro", "", "pp_cubecollection::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cubecollection__define.html#pp_cubecollection::getcube", "pp_cubecollection::getcube", 'routine in <a href="./pp_cubecollection__define.html">pp_cubecollection__define.pro</a>', "pp_cubecollection__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009  ", "pp_cubecollection::getcube", "    Retrieves selected cubes from the container, by their indexes or filenames.   ", "name      The names of the cubes to retrieve.   index      The index numbers of the cubes to retrieve.   ", "          -1", "    See the example on pp_editablecube__define.       If index or name are scalars, the object with the selected cube. If they are arrays,     an object array of the same dimensions, with each containing the corresponding object.     If a requested object is not found, a null object is returned in its place.     If both index and name are provided, the index values are used to select the cubes,     with their names returned in names.      The object references returned are to the same objects: no copy is made on successive calls     to get the same cube. A copy can be made making a new pp_editablecube object from the returned     object reference, as shown in the example.   ");
  
  libdata[libdataItem++] = new Array("./pp_cubecollection__define.html#pp_cubecollection::opensav", "pp_cubecollection::opensav", 'routine in <a href="./pp_cubecollection__define.html">pp_cubecollection__define.pro</a>', "pp_cubecollection__define.pro", "", "pp_cubecollection::opensav", "", "close", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cubecollection__define.html#pp_cubecollection::filenames", "pp_cubecollection::filenames", 'routine in <a href="./pp_cubecollection__define.html">pp_cubecollection__define.pro</a>', "pp_cubecollection__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009  ", "pp_cubecollection::filenames", "    Returns a string array with the filenames of all cubes in the collection.   ", "ncubes      The number of cubes contained in the collection.   ", "          -1", "    See the example on pp_editablecube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_cubecollection__define.html#pp_cubecollection__define", "pp_cubecollection__define", 'routine in <a href="./pp_cubecollection__define.html">pp_cubecollection__define.pro</a>', "pp_cubecollection__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009  ", "pp_cubecollection__define", "    Object that contains a collection of cubes, that can be retrieved as pp_editablecube objects     by their names or indexes. The cubes are stored in a savefile instead of memory, so initializing     from an existing file is a quick and light operation. The cube data is only read when that particular     cube is to be retrieved, and only those selected to be retrieved are read from the file. Thus a savefile     made by a pp_cubecollecion object is a portable, convenient and efficient way to store and carry several cubes.   ", "", "          -1", "    Initially, a container file must be built from cube files. To take all files ending with     '_ir_eg.cub' from the current directory (which can be a long operation and use a lot of     memory if there are many cubes): <span class= code-output >  a=obj_new('pp_cubecollection','testcollection.sav',/build,/ir)</span>     If a collection savefile already exists, no matter how large it is, loading it is a quick     and light operation, because only meta-data is read: <span class= code-output > a=obj_new('pp_cubecollection','testcollection.sav')</span>     To get the names of the cubes present in the collection: <span class= code-output > print,a-&gt;filenames(ncubes=ncubes)</span> <span class= code-output > ;CM_1467426144_5_ir_eg.cub CM_1467426479_1_ir_eg.cub CM_1467426798_1_ir_eg.cub CM_1467427145_1_ir_eg.cub</span> <span class= code-output > ;(...)</span> <span class= code-output > print,ncubes</span> <span class= code-output > 57</span>     To retrieve the first 3 cubes: <span class= code-output > b=a-&gt;getcube([0,1,2])</span>     To retrieve the cube of name CM_1467426479_1_ir_eg: <span class= code-output > c=a-&gt;getcube(name='CM_1467426479_1_ir_eg.cub')</span>  <span class= code-output >b[1] and c are the same object:</span> <span class= code-output > ;print,b[1],c</span>     To make a copy of that object, to keep after the collection is destroyed: <span class= code-output > d=obj_new('pp_editablecube',c)</span> <span class= code-output > print,obj_valid(b),obj_valid(c),obj_valid(d)</span> <span class= code-output > ;1   1   1</span> <span class= code-output > ;1</span> <span class= code-output > ;1</span> <span class= code-output > obj_destroy,b</span> <span class= code-output > print,obj_valid(b),obj_valid(c),obj_valid(d)</span> <span class= code-output > ;0   0   0</span> <span class= code-output > ;0</span> <span class= code-output > ;1</span>     Get rid of the collection once it is done with. This does not affect the savefile,     which can be used to reobtain this collection in the future: <span class= code-output > obj_destroy,a</span>     See pp_editablecube__define for examples on how to use the cube objects.   pp_editablecube__define, pp_getcubeheadervalue, pp_extractfields, pp_setcubeheadervalue, pp_readcube__define   ");
  
  

libdata[libdataItem++] = new Array("./pp_cubewidget__define.html", "pp_cubewidget__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_cubewidget__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_cubewidget__define.html#pp_cubewidget::init", "pp_cubewidget::init", 'routine in <a href="./pp_cubewidget__define.html">pp_cubewidget__define.pro</a>', "pp_cubewidget__define.pro", "", "pp_cubewidget::init", "", "_ref_extrastdparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cubewidget__define.html#pp_cubewidget::cleanup", "pp_cubewidget::cleanup", 'routine in <a href="./pp_cubewidget__define.html">pp_cubewidget__define.pro</a>', "pp_cubewidget__define.pro", "", "pp_cubewidget::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cubewidget__define.html#pp_cubewidget::eventhandler", "pp_cubewidget::eventhandler", 'routine in <a href="./pp_cubewidget__define.html">pp_cubewidget__define.pro</a>', "pp_cubewidget__define.pro", "", "pp_cubewidget::eventhandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cubewidget__define.html#pp_cubewidget::messagehandler", "pp_cubewidget::messagehandler", 'routine in <a href="./pp_cubewidget__define.html">pp_cubewidget__define.pro</a>', "pp_cubewidget__define.pro", "", "pp_cubewidget::messagehandler", "", "senderdatatitle", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cubewidget__define.html#pp_cubewidget__define", "pp_cubewidget__define", 'routine in <a href="./pp_cubewidget__define.html">pp_cubewidget__define.pro</a>', "pp_cubewidget__define.pro", "", "pp_cubewidget__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_editablecube__define.html", "pp_editablecube__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_editablecube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "", "", "", "          -1", "pp_getcubeheadervalue, pp_extractfields, pp_buffered_vector, pp_setcubeheadervalue   ");
  
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::init", "pp_editablecube::init", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_editablecube::init", "    Initializes am editablecube object, either from a readcube object, or from a file.   ", "orcube      A readcube or editablecube object from which a copy will be created to be edited in this object. The       original object is unchanged.  file      The filename from which to read the cube directly. If provided, orcube is ignored.  special      Same as pp_readcube::init's special:        Determines the type of special value replacement to use:        0 uses the default special values        1 uses the special values found in the header        2 disables special value replacement   preservespecial      If set, the special values used in the original cube are kept (unless data type changes).       Otherwise, default values are used.   ", "          -1", "    See the example on pp_editablecube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::setproperty", "pp_editablecube::setproperty", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_editablecube::setproperty", "    Changes one or more properties of the cube, according to the data given in the     keywords. All keywords are optional.   ", "core      An array to replace the core data with. Can be of any size, but must be 3D,       and can be of any numeric type. The object's data type gets replaced by the       type of core, if it is different. This is the only way to change the cube's       data type. To remove existing suffixes, change the 3 core dimensions without       providing corresponding suffix arrays.  backplanes      An array to replace the backplana data with. Must have the first two dimensions       equal to the cube's core, can have any number of planes (must be 3D). Most useful       to add new backplanes.  sideplanes      An array to replace the sideplane data with. Must have the last two dimensions       equal to the cube's core, can have any number of planes (must be 3D).  bottomplanes      An array to replace the bottom data with. Must have the first and last dimensions       equal to the cube's core, can have any number of planes (must be 3D).  backnames      A string array with each element containing the name of each backplane. If the number       of backplanes is changed and this is not provided, the backplane names get changed to       default values.  sidenames      A string array with each element containing the name of each sideplane. If the number       of backplanes is changed and this is not provided, the sideplane names get changed to       default values.  bottomnames      A string array with each element containing the name of each bottomplane. If the number       of backplanes is changed and this is not provided, the bottomplane names get changed to       default values.  wavelengths      A string array where each element is the wavelength of each core band. If the number of       core bands is changed and this is not provided, the wavelengths get changed to their       default value 'UNKNONW'.  backunits      A string array with each element containing the name of each backplane's unit. If the number       of backplanes is changed and this is not provided, the backplane units get changed to       default values 'UNKNOWN'.  sideunits      A string array with each element containing the name of each sideplane's unit. If the number       of backplanes is changed and this is not provided, the sideplane units get changed to       default values 'UNKNOWN'.  bottomunits      A string array with each element containing the name of each bottomplane's unit. If the number       of backplanes is changed and this is not provided, the bottomplane units get changed to       default values 'UNKNOWN'.  wavelengthunits      A string array with the name of the core bands unit.   ", "          -1", "    See the example on pp_editablecube__define.       The keywords marked as both in and out, if undefined or invalid at input,     return the assigned default values to their content. Otherwise, all keywords     are input only and unchanged.   ");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::updatedatainfo", "pp_editablecube::updatedatainfo", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "", "pp_editablecube::updatedatainfo", "", "namestypecore", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::updatesuffix", "pp_editablecube::updatesuffix", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "", "pp_editablecube::updatesuffix", "", "suffixnameinddimschangedtypechanged", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::updatecore", "pp_editablecube::updatecore", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "", "pp_editablecube::updatecore", "", "coredimschangedtypechanged", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::updatelocations", "pp_editablecube::updatelocations", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "", "pp_editablecube::updatelocations", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::headeredit", "pp_editablecube::headeredit", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_editablecube::headeredit", "    Changes values contained in the label or history part of the cube header.     Can set values of exisiting keys, add new keys, remove exisitng keys, or     just append lines to the header.   ", "key      Key name to be edited.  value      Value to be assigned to the named key. If absent, the key is removed.  append      Passed to pp_setcubeheadervalue as is.       A string scalar or array of lines to be inserted into the header. If provided, key and value are       ignored. No processing is done on the given lines, it is the user's responsability to ensure they       are valid.  history      If set, editing is done to the history part of the header, instead of the label part.   ", "          -1", "    See the example on pp_editablecube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::write", "pp_editablecube::write", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_editablecube::write", "    Writes the cube in the object to a cube file.   ", "filename      The name of the file to which the cube will be written. Optional only       if the object already contains a name in the newfile field from a previous       call of write.  ", "          -1", "    See the example on pp_editablecube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::export", "pp_editablecube::export", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_editablecube::export", "    Exports the cube in the object to a fits or csv file.   ", "formatfile      The name of the file to which the cube will be written.   ", "          -1", "    See the example on pp_editablecube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube::cleanup", "pp_editablecube::cleanup", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "", "pp_editablecube::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_editablecube__define.html#pp_editablecube__define", "pp_editablecube__define", 'routine in <a href="./pp_editablecube__define.html">pp_editablecube__define.pro</a>', "pp_editablecube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_editablecube__define", "    Object to read, edit and write an ISIS cube. Read functionality is the same     as that of the pp_readcube class (it is inherited from it, see its documentation     for details and examples on reading). Once the object is instantiated, either     from a file or from another editable cube, its data and metadata can be     changed, and it can be written to a file.      Initialization parses the cube into the object, other methods retrieve parts of it,     edit it, or write it to a file.      On reading, makes the same assumptions (inherits them) from the pp_readcube class:     All suffix items are the same data type as core items, cube has 3 axes in BSQ order,     and records have fixed length. On writing, these assumptions are maintained.      The only methods intended to be public are: getproperty, getspecialvalues,     getfromheader, getsuffixbyname, getbandbywavelength, setproperty, headeredit, and write.      See the documentation of the method setproperty for the most useful edit and     write example, or getproperty for the most useful read example.   ", "", "          -1", "    For read use, see the example on pp_readcube__define.      To initialize from the cube CM_1553510065_1_ir.cub: <span class= code-output > a=obj_new('pp_editablecube',file='CM_1553510065_1_ir.cub')</span>     To add a dummy backplane: <span class= code-output > a-&gt;getproperty,backplanes=back,backnames=bnames,lines=lines,samples=samples</span> <span class= code-output > backplanes=[[[backplanes]],[[findgen(lines,samples)]]]</span> <span class= code-output > backnames=[backnames,'DUMMY']</span> <span class= code-output > a-&gt;setproperty,backplanes=back,backnames=bnames</span>     To remove the first core band: <span class= code-output > a-&gt;getproperty,core=core,wavelengths=wavs</span> <span class= code-output > core=core[*,*,1:*] & wavs=wavs[1:*]</span> <span class= code-output > a-&gt;setproperty,core=core,wavelengths=wavs</span>     To add lines to the history part of the header: <span class= code-output > app=['GROUP = testedit','date = '+strcompress(systime(),/remove),'END_GROUP = testdate']</span> <span class= code-output > a-&gt;headerset,append=app</span>     To write the edited cube to 'testedit.cub': <span class= code-output > a-&gt;write,'testedit.cub'</span>     To write the edited cube to 'testedit.fits': <span class= code-output > a-&gt;export,'testedit.cub'</span>     Destroy the object when done with it: <span class= code-output > obj_destroy,a</span>  pp_readcube   ");
  
  

libdata[libdataItem++] = new Array("./pp_extractfields.html", "pp_extractfields.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_extractfields.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_extractfields.html#pp_extractfields", "pp_extractfields", 'routine in <a href="./pp_extractfields.html">pp_extractfields.pro</a>', "pp_extractfields.pro", "Paulo Penteado (pp.penteado@gmail.com)  ", "pp_extractfields", "    Given a string containing a comma-separated sequence of values, returns     a string array with each value. Values can be quoted strings, in which case     they can contain a comma inside them (which is why this routine exists, otherwise     strsplit could do the job). Either type of quote can be used to mark the strings, but     each string must be finished with the same type of quote it started.   ", "str      The string containing the comma-separated fields.  count      The number of fields found.   ", "          -1", "   Split ' 1,2 , 2 , 3 , 4 ' into its fields: <span class= code-output > print,pp_extractfields(' 1,2 , 2 , 3 , 4 ',count),count</span> <span class= code-output > ; 1,2   2   3   4 </span> <span class= code-output > ;       4</span>       A string array where each element is one of the comma-separated fields in str.   ");
  
  

libdata[libdataItem++] = new Array("./pp_getcubeheadervalue.html", "pp_getcubeheadervalue.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_getcubeheadervalue.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_getcubeheadervalue.html#pp_getcubeheadervalue", "pp_getcubeheadervalue", 'routine in <a href="./pp_getcubeheadervalue.html">pp_getcubeheadervalue.pro</a>', "pp_getcubeheadervalue.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_getcubeheadervalue", "   Retrieves the value of the given key from the given header in ISIS cube format.   ", "not_trimmed      This routine needs that each line of the header is trimmed from       whitespaces on both sides. If the provided header is not trimmed, set       this keyword so that it will be trimmed before processing (the input       variable is unchanged). This option exists to save repeated trimming on       multiple queries of the same header, in which case it should be trimmed       before the multiple calls of this routine, for better efficiency.  count      The number of occurences of the key found in the header. If more than 1       is found, the last occurence is used by default. Check this value to determine if       the key was not found (count will be 0 in that case).  fold_case      Passed to stregex when searching for the key. If set, capitalization of       the key is ignored.  lines      The line index (starting at zero) of the line in the header that provided       the retrieved value. If valued spanned more than one line, this is a vector       with the indexes of all such lines. If key not found, -1 is returned.  unquote      If set, enclosing quotes are removed from the return values  sel      In case more than one ocurrence of a keyword is found, sel gives the       index of the ocurrence to use (starts at 0). If not set, the last ocurrence       is the one used.   continueblankheader      A string array where each element is one line of an ISIS cube.  key      A string scalar with the key to be retrieved. Regular expression metacharacters must be escaped.   ", "          -1", "    Make a simple example header: <span class= code-output > head=strarr(3)</span> <span class= code-output > head[0]='BAND_SUFFIX_NAME = (LATITUDE,LONGITUDE,SAMPLE_RESOLUTION,LINE_RESOLUTION,'</span> <span class= code-output > head[1]='PHASE_ANGLE,INCIDENCE_ANGLE,EMISSION_ANGLE,NORTH_AZIMUTH)'</span> <span class= code-output > head[2]='START_TIME =  2007-084T10:00:57.286Z '</span>     Get its values: <span class= code-output > print,pp_getcubeheadervalue(head,'BAND_SUFFIX_NAME')</span> <span class= code-output > ;LATITUDE LONGITUDE SAMPLE_RESOLUTION LINE_RESOLUTION PHASE_ANGLE INCIDENCE_ANGLE EMISSION_ANGLE NORTH_AZIMUTH</span> <span class= code-output > print,pp_getcubeheadervalue(head,'START_TIME')</span> <span class= code-output > ; 2007-084T10:00:57.286Z </span>  pp_extractfields      A string scalar or vector (depending on the value being scalar or not) with    the value of the given key from the header. If not found, returns 0. If the    value is a quoted string, the quotes are not removed.   ");
  
  

libdata[libdataItem++] = new Array("./pp_mapwidget__define.html", "pp_mapwidget__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_mapwidget__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_mapwidget__define.html#pp_mapwidget::init", "pp_mapwidget::init", 'routine in <a href="./pp_mapwidget__define.html">pp_mapwidget__define.pro</a>', "pp_mapwidget__define.pro", "", "pp_mapwidget::init", "", "_ref_extramapsdbobjectparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_mapwidget__define.html#pp_mapwidget::update", "pp_mapwidget::update", 'routine in <a href="./pp_mapwidget__define.html">pp_mapwidget__define.pro</a>', "pp_mapwidget__define.pro", "", "pp_mapwidget::update", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_mapwidget__define.html#pp_mapwidget::draw", "pp_mapwidget::draw", 'routine in <a href="./pp_mapwidget__define.html">pp_mapwidget__define.pro</a>', "pp_mapwidget__define.pro", "", "pp_mapwidget::draw", "", "_ref_extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_mapwidget__define.html#pp_mapwidget::eventhandler", "pp_mapwidget::eventhandler", 'routine in <a href="./pp_mapwidget__define.html">pp_mapwidget__define.pro</a>', "pp_mapwidget__define.pro", "", "pp_mapwidget::eventhandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_mapwidget__define.html#pp_mapwidget::getproperty", "pp_mapwidget::getproperty", 'routine in <a href="./pp_mapwidget__define.html">pp_mapwidget__define.pro</a>', "pp_mapwidget__define.pro", "", "pp_mapwidget::getproperty", "", "cubeselected_pixelspixel_function_ref_extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_mapwidget__define.html#pp_mapwidget::messagehandler", "pp_mapwidget::messagehandler", 'routine in <a href="./pp_mapwidget__define.html">pp_mapwidget__define.pro</a>', "pp_mapwidget__define.pro", "", "pp_mapwidget::messagehandler", "", "senderdatatitle", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_mapwidget__define.html#pp_mapwidget__define", "pp_mapwidget__define", 'routine in <a href="./pp_mapwidget__define.html">pp_mapwidget__define.pro</a>', "pp_mapwidget__define.pro", "", "pp_mapwidget__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_readcube__define.html", "pp_readcube__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "", " ", "", "          -1", "pp_getcubeheadervalue, pp_extractfields, pp_buffered_vector   ");
  
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::init", "pp_readcube::init", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::init", "    Provided with the name of the file, initializes the object reading the cube in it.   ", "special      Determines the type of special value replacement to use:        0 uses the default special values        1 uses the special values found in the header        2 disables special value replacement   file      The name of the file that contains the cube.   ", "          -1", "    See the example on pp_readcube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::cleanup", "pp_readcube::cleanup", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "", "pp_readcube::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::parselabels", "pp_readcube::parselabels", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "", "pp_readcube::parselabels", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::processdata", "pp_readcube::processdata", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "", "pp_readcube::processdata", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getspecialvalues", "pp_readcube::getspecialvalues", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::getspecialvalues", "    Provides a structure with the special values to use in this cube,     determined by the special replacement mode selected when the object     was created (see documentation of the init method).   ", "default", "          -1", "    A structure where each field is one of the six special values:     VALID_MIN,NULL,LOW_REPR_SAT,LOW_INSTR_SAT,HIGH_INSTR_SAT,HIGH_REPR_SAT   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube_specialreplace", "pp_readcube_specialreplace", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "", "pp_readcube_specialreplace", "", "dataspecial", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getexerpt", "pp_readcube::getexerpt", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "", "pp_readcube::getexerpt", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getproperty", "pp_readcube::getproperty", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::getproperty", "    Retrieves parts of the data contained in the object. If keyword all is given,     returns all the properties as fields of a structure.   ", "all      A structure containing every property as a field with the same name as the corresponding keyword.  file      File from which the cube was read.  special      The special value replacement mode used when the data was processed: 0 for default special values,       1 for special values given in the header, 2 for no special value replacement.  labels      String array with one element for each line of the label part of the cube header.  history      String array with one element for each line of the history part of the cube header.  core      3D array with the core data values.  backplanes      3D array with the backplane values, if there are blackplanes, a null pointer otherwise.  sideplanes      3D array with the sideplane values, if there are sideplanes, a null pointer otherwise.  bottomplanes      3D array with the bottomplane values, if there are bottomplanes, a null pointer otherwise.  info      A structure with the cube parameters that were used to read it.  lines      The number of lines in the core.  bands      The number of bands in the core.  samples      The number of samples in the core.  nback      The number of backplanes in the suffix.  nside      The number of sideplanes in the suffix.  nbottom      The number of bottomplanes in the suffix.  rawdata      The unprocessed binary part of the cube.  wavelengths      A string array with the wavelength of each core band ('UNKNOWN's if not found).  backnames      A string array with the name of each backplane ('UNKNOWN_'+sindgen(nback) if not found).  sidenames      A string array with the name of each sideplane ('UNKNOWN_'+sindgen(nside) if not found).  bottomnames      A string array with the name of each bottomplane ('UNKNOWN_'+sindgen(nbottom) if not found).  units      A string with the wavelength unit of the core bands ('UNKNOWN' if not found).  backunits      A string array with the name of each backplane's unit ('UNKNOWN's if not found).  sideunits      A string array with the name of each sideplane's unit ('UNKNOWN's if not found).  bottomunits      A string array with the name of each bottomplane's unit ('UNKNOWN's if not found).  struct_backplanes      2D array of structures, each with one field for each backplane, if there are blackplanes, a null pointer otherwise.   npixelslatslons", "          -1", "    See the example on pp_readcube__define.       See keyword descriptions.   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getproperty", "pp_readcube::getproperty", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::getproperty", "    Simple function wrapper for the routine method getproperty. Has the same keywords,     and retrieves the same values, but with function semantics instead of routine. Only     one keyword should be set, and the corresponding value is the function's return value.   ", "allfilespeciallabelshistorycorebackplanessideplanesbottomplanesinfolinesbandssamplesnbacknsidenbottomrawdatawavelengthsbacknamessidenamesbottomnamesunitsbackunitssideunitsbottomunits", "          -1", "    See the example on pp_readcube__define.   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getsuffixbyname", "pp_readcube::getsuffixbyname", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::getsuffixbyname", "    Retrieves suffix planes by their names. If all suffix planes, or their names,     are to be retrieved, the getproperty method should be used instead. By default,     backplanes are retrieved, but sideplanes and bottomplanes can be returned if the     corresponding keyword is set.   ", "found      An integer array with the same number of elements as names, with the number       of suffix planes that match each given name. If more than one suffix plane has       the selected name, the first one is the one returned (though proper cubes should       not have multiple planes with the same name).  case_sensitive      If set, name matches are case-sensitive (though proper cubes should not have planes       the same name in different capitalizations).  side      By default, the search for the planes is done among the cube's backplanes. If this keyword is       set, sideplanes are used instead.  bottom      By default, the search for the planes is done among the cube's backplanes. If this keyword is       set, bottomplanes are used instead.  back      If set, the search for the planes is done among the cube's backplanes (default).   index      An integer array with the same number of elements as names, with the index of the returned       suffix planes that matched each given name. If more than one suffix plane has       the selected name, the first one is the one returned (though proper cubes should       not have multiple planes with the same name). When that plane was not found, the corresponding       index will be -1.  names      A scalar or string array with the name(s) of the suffix plane(s) to retrieve.       If more than one plane is returned, their order (in the 3rd dimension of the       returned array) is the same as the order of the names in this array.   ", "          -1", "    See the example on pp_readcube__define.       A 2D array (if only one plane is requested) or 3D array (if several planes) with     the names suffix planes. If one plane is not found, the corresponding array plane contains     either NaN (for real types) or special.null (for integer types).   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getbandbywavelength", "pp_readcube::getbandbywavelength", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::getbandbywavelength", "    Retrieves one or more core bands from their wavelengths. The returned bands     are those with wavelength nearest to the ones provided, so they need not     match exactly.   ", "index      Returns the index of the band that matched each provided wavelength.   wavelengths      Returns the wavelength of the band that matched each provided wavelength.   wavs      A scalar or array with the value(s) of the wavelength(s) to search for.   ", "          -1", "    See the example on pp_readcube__define.       If only one wavelength is provided, returns a 2D array with that band.     If more than one wavelength is provided, the result is a 3D array, with the     3rd dimension being the bands.   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getbandbyindex", "pp_readcube::getbandbyindex", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::getbandbyindex", "    Retrieves one or more core bands from their indexes.   ", "wavelengths      Returns the wavelength of the band that matched each provided index.   index      A scalar or array with the value(s) of the index(es) to search for.   ", "          -1", "    See the example on pp_readcube__define.       If only one index is provided, returns a 2D array with that band.     If more than one index is provided, the result is a 3D array, with the     3rd dimension being the bands.   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::getfromheader", "pp_readcube::getfromheader", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube::getfromheader", "    Retrieves values contained in the label or history part of the cube header.     Just a wrapper for pp_getcubeheadervalue. See its documentation for details.   ", "history      If set, reading is done on the history part of the header, instead of the label part.  count      Passed to pp_getcubeheadervalue.       The number of occurences of the key found in the header. If more than 1       is found, the last occurence is used. Check this value to determine if       the key was not found (count will be 0 in that case).  fold_case      Passed to pp_getcubeheadervalue.       Passed to stregex when searching for the key. If set, capitalization of       the key is ignored.  lines      Passed to pp_getcubeheadervalue.       The line index (starting at zero) of the line in the header that provided       the retrieved value. If valued spanned more than one line, this is a vector       with the indexes of all such lines. If key not found, -1 is returned.  unquote      Passed to pp_getcubeheadervalue.       If set, enclosing quotes are removed from the return values  sel      Passed to pp_getcubeheadervalue.       In case more than one ocurrence of a keyword is found, sel gives the       index of the ocurrence to use (starts at 0). If not set, the last ocurrence       is the one used.   contkey      Key name to be retrieved.   ", "          -1", "    See the examples on pp_readcube__define and pp_getcubeheadervalue.   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube::_overloadBracketsRightSide", "pp_readcube::_overloadBracketsRightSide", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2011  ", "pp_readcube::_overloadBracketsRightSide", "    Simple overloading to retrieve core bands, backplanes, or wavelenghts from the cube.      Only 1D is processed. If more than 1D is specified, !null is returned.   ", "isRangesub1sub2sub3sub4sub5sub6sub7sub8", "          -1", "    See the example on pp_readcube__define.       The returned value depends on the type of the index provided:      If the index is an integer type (including a range), a 2D or 3D array is returned,     with the corresponding core band(s).      If the index is of string type, then a 2D or 3D array with the corresponsing     backplane(s) is returned.      If the index is of type double, a 2D or 3D array is returned with the core bands     that have wavelength(s) closest to the wavelength(s) given by the subscript.      If the index is of type float, a 1D array is returned with the core wavelengths     that are nearest to the correspoinding given wavelength(s).   ");
  
  libdata[libdataItem++] = new Array("./pp_readcube__define.html#pp_readcube__define", "pp_readcube__define", 'routine in <a href="./pp_readcube__define.html">pp_readcube__define.pro</a>', "pp_readcube__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_readcube__define", "     Object to read an ISIS cube.      Initialization parses the cube into the object, other methods retrieve parts of it.      Assumes that all suffix items are the same data type as core items.      Assumes that cube has 3 axes in BSQ order.      Assumes constant length records.      The only methods intended to be public are getproperty,getspecialvalues, getfromheader,     getsuffixbyname, and getbandbywavelength.   ", "", "          -1", "    To read the cube CM_1553510065_1_ir.cub: <span class= code-output > a=obj_new('pp_readcube','CM_1553510065_1_ir.cub')</span>     To get the core and its wavelengths: <span class= code-output > a-&gt;getproperty,core=core,wavelengths=wavs</span> <span class= code-output > print,min(wavs,max=mw),mw</span> <span class= code-output > ;0.88421000       5.1225000</span>     To get the backplanes and their names: <span class= code-output > a-&gt;getproperty,backplanes=back,backnames=bnames</span> <span class= code-output > print,bnames</span> <span class= code-output > ;LATITUDE LONGITUDE SAMPLE_RESOLUTION LINE_RESOLUTION PHASE_ANGLE INCIDENCE_ANGLE EMISSION_ANGLE NORTH_AZIMUTH</span>     To get the file name: <span class= code-output > print,a-&gt;getproperty(/file)</span> <span class= code-output > ;CM_1553510065_1_ir.cub</span>     To get all the properties at once: <span class= code-output >a-&gt;getproperty,all=a_all</span> <span class= code-output >;** Structure PP_READCUBE_ALL, 24 tags, length=98912, data length=98895:</span> <span class= code-output >;   FILE            STRING    'CM_1553510065_1_ir.cub'</span> <span class= code-output >;   SPECIAL         BYTE         0</span> <span class= code-output >;   LABELS          STRING    Array[268]</span> <span class= code-output >;   HISTORY         STRING    Array[479]</span> <span class= code-output >;   CORE            FLOAT     Array[1, 40, 256]</span> <span class= code-output >;   BACKPLANES      FLOAT     Array[1, 40, 8]</span> <span class= code-output >;   SIDEPLANES      POINTER   &lt;NullPointer&gt;</span> <span class= code-output >;   BOTTOMPLANES    POINTER   &lt;NullPointer&gt;</span> <span class= code-output >;   INFO            STRUCT    -&gt; PP_READCUBE_INFO Array[1]</span> <span class= code-output >;   LINES           LONG                40</span> <span class= code-output >;   SAMPLES         LONG                 1</span> <span class= code-output >;   BANDS           LONG               256</span> <span class= code-output >;   NBACK           LONG                 8</span> <span class= code-output >;   NSIDE           LONG                 0</span> <span class= code-output >;   NBOTTOM         LONG                 0</span> <span class= code-output >;   RAW             FLOAT     Array[1, 40, 264]</span> <span class= code-output >;   WAVELENGTHS     DOUBLE    Array[256]</span> <span class= code-output >;   BACKNAMES       STRING    Array[8]</span> <span class= code-output >;   SIDENAMES       POINTER   &lt;NullPointer&gt;</span> <span class= code-output >;   BOTTOMNAMES     POINTER   &lt;NullPointer&gt;</span> <span class= code-output >;   UNITS           STRING    'MICROMETER'</span> <span class= code-output >;   BACKUNITS       STRING    Array[8]</span> <span class= code-output >;   SIDEUNITS       POINTER   &lt;NullPointer&gt;</span> <span class= code-output >;   BOTTOMUNITS     POINTER   &lt;NullPointer&gt;</span>     To get the latitudes: <span class= code-output > lats=a-&gt;getsuffixbyname('LATITUDE')</span>     Or, equivalenty: <span class= code-output > lats=a['LATITUDE']</span>     To get the band with wavelength nearest to 2.1 (in the units used in the cube): <span class= code-output > selband=a-&gt;getbandbywavelength(2.1,wavelengths=selwavs)</span> <span class= code-output > print,selwavs</span> <span class= code-output > ;2.1003400</span>     Or, equivalently: <span class= code-output > selband=a[2.1d0]</span> <span class= code-output > selwavs=a[2.1]</span> <span class= code-output > print,selwavs</span> <span class= code-output > ;2.1003400</span>     To get the start time of the cube: <span class= code-output > print,a-&gt;getfromheader('START_TIME')</span> <span class= code-output > ; 2007-084T10:00:57.286Z </span>     Destroy the object when done with it: <span class= code-output > obj_destroy,a</span>  pp_getcubeheadervalue, pp_extractfields   ");
  
  

libdata[libdataItem++] = new Array("./pp_setcubeheadervalue.html", "pp_setcubeheadervalue.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_setcubeheadervalue.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_setcubeheadervalue.html#pp_setcubeheadervalue", "pp_setcubeheadervalue", 'routine in <a href="./pp_setcubeheadervalue.html">pp_setcubeheadervalue.pro</a>', "pp_setcubeheadervalue.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_setcubeheadervalue", "    Sets the value of the given key from the given header in ISIS cube format. If value is     not provided, the key is erased from the header. If append is given, its contents are just     inserted into the header, without affecting the rest of its contents (and value and key are ignored).   ", "append      A string scalar or array of lines to be inserted into the header. If provided, key and value are       ignored. No processing is done on the given lines, it is the user's responsability to ensure they       are valid.   header      A string array where each element is one line of an ISIS cube.  key      A string scalar with the key to be set. Regular expression metacharacters must be escaped.  value      A scalar of vector of any type (it gets converted to string) with the value(s) to set       the key to. If absent and a key is given, that key is erased (if found) from the header.   ", "          -1", "    Make a simple example header: <span class= code-output > head=strarr(5)</span> <span class= code-output > head[0]='CCSD3ZF0000100000001NJPL3IF0PDS200000001 = SFDU_LABEL'</span> <span class= code-output > head[1]='BAND_SUFFIX_NAME = (LATITUDE,LONGITUDE,SAMPLE_RESOLUTION,LINE_RESOLUTION,'</span> <span class= code-output > head[2]='PHASE_ANGLE,INCIDENCE_ANGLE,EMISSION_ANGLE,NORTH_AZIMUTH)'</span> <span class= code-output > head[3]='START_TIME =  2007-084T10:00:57.286Z '</span> <span class= code-output > head[4]='END'</span>     Change the START_TIME: <span class= code-output > pp_setcubeheadervalue,head,'START_TIME','UNKNOWN'</span> <span class= code-output > print,head,format='(A0)'</span> <span class= code-output > ;CCSD3ZF0000100000001NJPL3IF0PDS200000001 = SFDU_LABEL</span> <span class= code-output > ;BAND_SUFFIX_NAME = (LATITUDE,LONGITUDE,SAMPLE_RESOLUTION,LINE_RESOLUTION,</span> <span class= code-output > ;PHASE_ANGLE,INCIDENCE_ANGLE,EMISSION_ANGLE,NORTH_AZIMUTH)</span> <span class= code-output > ;START_TIME = UNKNOWN</span> <span class= code-output > ;END</span>  pp_getcubeheadervalue, pp_extractfields   ");
  
  

libdata[libdataItem++] = new Array("./pp_spectrumwidget__define.html", "pp_spectrumwidget__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_spectrumwidget__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_spectrumwidget__define.html#pp_spectrumwidget::init", "pp_spectrumwidget::init", 'routine in <a href="./pp_spectrumwidget__define.html">pp_spectrumwidget__define.pro</a>', "pp_spectrumwidget__define.pro", "", "pp_spectrumwidget::init", "", "_ref_extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_spectrumwidget__define.html#pp_spectrumwidget::eventhandler", "pp_spectrumwidget::eventhandler", 'routine in <a href="./pp_spectrumwidget__define.html">pp_spectrumwidget__define.pro</a>', "pp_spectrumwidget__define.pro", "", "pp_spectrumwidget::eventhandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_spectrumwidget__define.html#pp_spectrumwidget::setproperty", "pp_spectrumwidget::setproperty", 'routine in <a href="./pp_spectrumwidget__define.html">pp_spectrumwidget__define.pro</a>', "pp_spectrumwidget__define.pro", "", "pp_spectrumwidget::setproperty", "", "spectrum_data_ref_extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_spectrumwidget__define.html#pp_spectrumwidget::getproperty", "pp_spectrumwidget::getproperty", 'routine in <a href="./pp_spectrumwidget__define.html">pp_spectrumwidget__define.pro</a>', "pp_spectrumwidget__define.pro", "", "pp_spectrumwidget::getproperty", "", "spectrum_data_ref_extranspec", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_spectrumwidget__define.html#pp_spectrumwidget::plot", "pp_spectrumwidget::plot", 'routine in <a href="./pp_spectrumwidget__define.html">pp_spectrumwidget__define.pro</a>', "pp_spectrumwidget__define.pro", "", "pp_spectrumwidget::plot", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_spectrumwidget__define.html#pp_spectrumwidget__define", "pp_spectrumwidget__define", 'routine in <a href="./pp_spectrumwidget__define.html">pp_spectrumwidget__define.pro</a>', "pp_spectrumwidget__define.pro", "", "pp_spectrumwidget__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html", "pp_titanbrowse__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_titanbrowse__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009   ", "", "", "", "          -1", "20141114   pp_editablecube__define, pp_getcubeheadervalue, pp_extractfields, pp_setcubeheadervalue, pp_readcube__define pp_cubecollection__define, pp_titanbrowse_metadb__define, pp_titanbrowse_db__define   ");
  
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::init", "pp_titanbrowse::init", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::init", "", "viscubestoselectmdbfiles", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::indexcubes", "pp_titanbrowse::indexcubes", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::indexcubes", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::saveindex", "pp_titanbrowse::saveindex", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::saveindex", "", "file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::selectcubes", "pp_titanbrowse::selectcubes", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::selectcubes", "", "allnonecountpixelsselectedbytablewholecubesiexpr", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::selectpixels", "pp_titanbrowse::selectpixels", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::selectpixels", "", "allnonecountevalwhereresiexpr", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::evalexpr", "pp_titanbrowse::evalexpr", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::evalexpr", "", "storecubeiexpr", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::parseexpr", "pp_titanbrowse::parseexpr", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::parseexpr", "", "cubespixelsiexpr", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::cleardbvecs", "pp_titanbrowse::cleardbvecs", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::cleardbvecs", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::getproperty", "pp_titanbrowse::getproperty", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::getproperty", "", "cubelistpixellistupdatemdbfilesodbstdnselcubesnselpixelsversionused_memoryevalrescubeevalrescubehash", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::getselectedpixels", "pp_titanbrowse::getselectedpixels", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::getselectedpixels", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::getselectedcubes", "pp_titanbrowse::getselectedcubes", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::getselectedcubes", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::setproperty", "pp_titanbrowse::setproperty", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::setproperty", "", "update", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::getcubeinfo", "pp_titanbrowse::getcubeinfo", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::getcubeinfo", "", "file_indexcube_indexcube_namecube_object", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::getpixeldata", "pp_titanbrowse::getpixeldata", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::getpixeldata", "", "pixin", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::_overloadBracketsRightSide", "pp_titanbrowse::_overloadBracketsRightSide", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::_overloadBracketsRightSide", "", "isRangesub1sub2sub3sub4sub5sub6sub7sub8", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse::cleanup", "pp_titanbrowse::cleanup", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse__define.html#pp_titanbrowse__define", "pp_titanbrowse__define", 'routine in <a href="./pp_titanbrowse__define.html">pp_titanbrowse__define.pro</a>', "pp_titanbrowse__define.pro", "", "pp_titanbrowse__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_titanbrowse_datacompress.html", "pp_titanbrowse_datacompress.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_titanbrowse_datacompress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_datacompress.html#pp_titanbrowse_datacompress", "pp_titanbrowse_datacompress", 'routine in <a href="./pp_titanbrowse_datacompress.html">pp_titanbrowse_datacompress.pro</a>', "pp_titanbrowse_datacompress.pro", "Paulo Penteado (pp.penteado@gmail.com), Jul/2010  ", "pp_titanbrowse_datacompress", "    Changes the use of compression in pp_titanbrowse's data files     (both for pp_titanbrowse_db and pp_titanbrowse_metadb). This rotuine is     necessary, instead of just opening and saving the files, to properly handle     the references to the heap variables stored.      The files are provided compressed for faster downloads, and can be used     in that way. But if the user want to trade disk space for lower processor     use (and, potentially, faster operation, if the disk is fast enough), this     routine can be used to decompress the files.      This rotuine can take several minutes to run, as all datafiles currently     add to tens of GB.   ", "compress      Determines whether the created files will be compressed.   savefile      The name of the savefile to compress/decompress.   ", "          -1", "    To decompress all pp_titanbrowse's ir channel files in the current directory: <span class= code-output > fl=file_search('covims_????_ir*.sav') ;find the files</span> <span class= code-output > for i=0,n_elements(fl)-1 do pp_titanbrowse_datacompress,fl[i],compress=0</span>  ");
  
  

libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html", "pp_titanbrowse_db__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_titanbrowse_db__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009  ", "", "", "", "          -1", "pp_editablecube__define, pp_getcubeheadervalue, pp_extractfields, pp_setcubeheadervalue pp_readcube__define, pp_cubecollection, pp_titanbrowse_metadb   ");
  
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::init", "pp_titanbrowse_db::init", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::init", "", "buildcompressmetadbfile", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::build_db", "pp_titanbrowse_db::build_db", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::build_db", "", "compress", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::opendbsav", "pp_titanbrowse_db::opendbsav", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::opendbsav", "", "close", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::getband", "pp_titanbrowse_db::getband", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::getband", "", "pointerindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::getbackplane", "pp_titanbrowse_db::getbackplane", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::getbackplane", "", "pointerindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::loadband", "pp_titanbrowse_db::loadband", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::loadband", "", "index", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::loadbackplane", "pp_titanbrowse_db::loadbackplane", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::loadbackplane", "", "index", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::unload", "pp_titanbrowse_db::unload", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::unload", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::getproperty", "pp_titanbrowse_db::getproperty", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::getproperty", "", "stdpstartused_memoryrevsseqsseqhcubeshbackinds", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::cleanup", "pp_titanbrowse_db::cleanup", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db::_overloadBracketsRightSide", "pp_titanbrowse_db::_overloadBracketsRightSide", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db::_overloadBracketsRightSide", "", "isRangesub1sub2sub3sub4sub5sub6sub7sub8", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_db__define.html#pp_titanbrowse_db__define", "pp_titanbrowse_db__define", 'routine in <a href="./pp_titanbrowse_db__define.html">pp_titanbrowse_db__define.pro</a>', "pp_titanbrowse_db__define.pro", "", "pp_titanbrowse_db__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html", "pp_titanbrowse_gui__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_titanbrowse_gui__define.pro", "Paulo Penteado (pp.penteado@gmail.com)  ", "", "", "", "          -1", "20151020   pp_editablecube__define, pp_getcubeheadervalue, pp_extractfields, pp_setcubeheadervalue, pp_readcube__define pp_cubecollection__define, pp_titanbrowse_metadb__define, pp_titanbrowse_db__define, pp_titanbrowse__define pp_mapwidget__define, pp_cubewidget__define, pp_spectrumwidget__define.  Requires, Catalist, library, Coyote, library, (http://www.dfanning.com/catalyst/howtoinstall.html) issmap_2009.tiff, issmap_201506.tiff, vimsmap_2009.tiff   ");
  
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui::init", "pp_titanbrowse_gui::init", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui::init", "", "vis_ref_extramdbfiles", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui::cleanup", "pp_titanbrowse_gui::cleanup", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui::eventhandler", "pp_titanbrowse_gui::eventhandler", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui::eventhandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_tabwidget::messagehandler", "pp_titanbrowse_gui_tabwidget::messagehandler", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_tabwidget::messagehandler", "", "senderdatatitle", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_treewidget::messagehandler", "pp_titanbrowse_gui_treewidget::messagehandler", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_treewidget::messagehandler", "", "senderdatatitle", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_textwidget::messagehandler", "pp_titanbrowse_gui_textwidget::messagehandler", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_textwidget::messagehandler", "", "senderdatatitle", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_selectorwidget::init", "pp_titanbrowse_gui_selectorwidget::init", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_selectorwidget::init", "", "cubepixelstddb_ref_extraparent", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_selectorwidget::getproperty", "pp_titanbrowse_gui_selectorwidget::getproperty", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_selectorwidget::getproperty", "", "frozen_ref_extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_selectorwidget::setproperty", "pp_titanbrowse_gui_selectorwidget::setproperty", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_selectorwidget::setproperty", "", "listnselfrozen_ref_extra", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_selectorwidget::eventhandler", "pp_titanbrowse_gui_selectorwidget::eventhandler", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_selectorwidget::eventhandler", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui_selectorwidget::messagehandler", "pp_titanbrowse_gui_selectorwidget::messagehandler", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui_selectorwidget::messagehandler", "", "senderdatatitle", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui::getproperty", "pp_titanbrowse_gui::getproperty", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui::getproperty", "", "db_ref_extraversion", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_gui__define.html#pp_titanbrowse_gui__define", "pp_titanbrowse_gui__define", 'routine in <a href="./pp_titanbrowse_gui__define.html">pp_titanbrowse_gui__define.pro</a>', "pp_titanbrowse_gui__define.pro", "", "pp_titanbrowse_gui__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html", "pp_titanbrowse_metadb__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_titanbrowse_metadb__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2009  ", "", "", "", "          -1", "pp_editablecube__define, pp_getcubeheadervalue, pp_extractfields, pp_setcubeheadervalue, pp_readcube__define   ");
  
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb::init", "pp_titanbrowse_metadb::init", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb::init", "", "modelindexbuild_dbbuild_collectioncubefilesvisircompress_ref_extrasavefile", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb::parsecubes", "pp_titanbrowse_metadb::parsecubes", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb::parsecubes", "", "compress", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb::getcmd", "pp_titanbrowse_metadb::getcmd", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb::getcmd", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb::getncmd", "pp_titanbrowse_metadb::getncmd", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb::getncmd", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb::getcubevars", "pp_titanbrowse_metadb::getcubevars", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb::getcubevars", "", "level", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb::getpixelvars", "pp_titanbrowse_metadb::getpixelvars", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb::getpixelvars", "", "level", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb::cleanup", "pp_titanbrowse_metadb::cleanup", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_titanbrowse_metadb__define.html#pp_titanbrowse_metadb__define", "pp_titanbrowse_metadb__define", 'routine in <a href="./pp_titanbrowse_metadb__define.html">pp_titanbrowse_metadb__define.pro</a>', "pp_titanbrowse_metadb__define.pro", "", "pp_titanbrowse_metadb__define", "", "", "          -1", "");
  
  

